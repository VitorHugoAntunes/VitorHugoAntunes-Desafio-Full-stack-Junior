services:
  # PostgreSQL Database
  postgres:
    container_name: app-postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: app_database
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    container_name: app-rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    container_name: app-api-gateway
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    ports:
      - "3333:3333"
    environment:
      NODE_ENV: production
      PORT: 3333
      DATABASE_URL: postgresql://postgres:docker@postgres:5432/app_database
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      AUTH_SERVICE_URL: http://auth-service:3334
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
    volumes:
      - api-gateway-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service
  auth-service:
    container_name: app-auth-service
    build:
      context: .
      dockerfile: apps/auth-service/Dockerfile
    ports:
      - "3334:3334"
    environment:
      NODE_ENV: production
      PORT: 3334
      DATABASE_URL: postgresql://postgres:docker@postgres:5432/app_database
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      JWT_PRIVATE_KEY: ${JWT_PRIVATE_KEY}
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
    volumes:
      - auth-service-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3334/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Tasks Service
  tasks-service:
    container_name: app-tasks-service
    build:
      context: .
      dockerfile: apps/tasks-service/Dockerfile
    ports:
      - "3335:3335"
    environment:
      NODE_ENV: production
      PORT: 3335
      DATABASE_URL: postgresql://postgres:docker@postgres:5432/app_database
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
    volumes:
      - tasks-service-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3335/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notifications Service
  notifications-service:
    container_name: app-notifications-service
    build:
      context: .
      dockerfile: apps/notifications-service/Dockerfile
    ports:
      - "3336:3336" # HTTP
    environment:
      NODE_ENV: production
      PORT: 3336
      WEBSOCKET_PORT: 3336
      DATABASE_URL: postgresql://postgres:docker@postgres:5432/app_database
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672
      JWT_PUBLIC_KEY: ${JWT_PUBLIC_KEY}
    volumes:
      - notifications-service-logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3336/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    container_name: app-web
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    ports:
      - "5173:5173"
    environment:
      NODE_ENV: production
      PORT: 5173
      VITE_API_URL: http://localhost:3333
      VITE_WEBSOCKET_URL: http://localhost:3333
    depends_on:
      - api-gateway
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  api-gateway-logs:
  auth-service-logs:
  tasks-service-logs:
  notifications-service-logs: